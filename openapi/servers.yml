openapi: 3.0.1
info:
  title: Servers API
  version: "1.0"
servers:
  - url: http://localhost:8080
    description: Local
paths:
  /api/v1/servers/{id}:
    get:
      tags:
        - server
      summary: Получить информацию о сервере по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Информация о сервере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
    put:
      tags:
        - server
      summary: Полное обновление информации о сервере
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
        required: true
      responses:
        '200':
          description: Информация о сервере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
    delete:
      tags:
        - server
      summary: Удалить сервер
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Сервер успешно удален
    patch:
      tags:
        - server
      summary: Обновление информации о сервере
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
        required: true
      responses:
        '200':
          description: Информация о сервере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerResponse'
  /api/v1/servers:
    get:
      tags:
        - server
      summary: Получить список всех серверов
      responses:
        '200':
          description: Информация о сервере
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServersResponse'
    post:
      tags:
        - server
      summary: Создать новый сервер
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerRequest'
        required: true
      responses:
        '201':
          description: Сервер успешно создан
components:
  schemas:
    CreateServerRequest:
      required:
        - bandwidth
        - latency
        - purpose
        - state
      type: object
      example:
        {
          "bandwidth": 100,
          "latency": 100,
          "purpose": "BACKEND",
          "state": {
            "city": "Moscow",
            "country": "Russia"
          }
        }
      properties:
        purpose:
          $ref: '#/components/schemas/Purpose'
        latency:
          maximum: 100
          minimum: 0
          type: integer
          format: int32
        bandwidth:
          maximum: 10000000
          minimum: 0
          type: integer
          format: int32
        state:
          $ref: '#/components/schemas/StateInfo'
    StateInfo:
      required:
        - city
        - country
      type: object
      example:
        {
          "id": 1,
          "city": "Moscow",
          "country": "Russia"
        }
      properties:
        id:
          type: integer
          format: int32
        city:
          type: string
        country:
          type: string
    ServerResponse:
      required:
        - id
        - latency
        - purpose
        - bandwidth
        - state
      type: object
      example:
        {
          "id": 1,
          "bandwidth": 100,
          "latency": 100,
          "purpose": "BACKEND",
          "state": {
            "id": 1,
            "city": "Moscow",
            "country": "Russia"
          }
        }
      properties:
        id:
          type: integer
          format: int32
        purpose:
          $ref: '#/components/schemas/Purpose'
        latency:
          type: integer
          format: int32
        bandwidth:
          type: integer
          format: int32
        state:
          $ref: '#/components/schemas/StateInfo'
    ServersResponse:
      required:
        - servers
      type: object
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/ServerResponse'
    Purpose:
      type: string
      enum:
        - FRONTEND
        - BACKEND
        - DATABASE
